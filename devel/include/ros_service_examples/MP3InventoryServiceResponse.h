// Generated by gencpp from file ros_service_examples/MP3InventoryServiceResponse.msg
// DO NOT EDIT!


#ifndef ROS_SERVICE_EXAMPLES_MESSAGE_MP3INVENTORYSERVICERESPONSE_H
#define ROS_SERVICE_EXAMPLES_MESSAGE_MP3INVENTORYSERVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_service_examples
{
template <class ContainerAllocator>
struct MP3InventoryServiceResponse_
{
  typedef MP3InventoryServiceResponse_<ContainerAllocator> Type;

  MP3InventoryServiceResponse_()
    : response_string()
    , list_strings()  {
    }
  MP3InventoryServiceResponse_(const ContainerAllocator& _alloc)
    : response_string(_alloc)
    , list_strings(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _response_string_type;
  _response_string_type response_string;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _list_strings_type;
  _list_strings_type list_strings;




  typedef boost::shared_ptr< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MP3InventoryServiceResponse_

typedef ::ros_service_examples::MP3InventoryServiceResponse_<std::allocator<void> > MP3InventoryServiceResponse;

typedef boost::shared_ptr< ::ros_service_examples::MP3InventoryServiceResponse > MP3InventoryServiceResponsePtr;
typedef boost::shared_ptr< ::ros_service_examples::MP3InventoryServiceResponse const> MP3InventoryServiceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_service_examples

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8645f6a7a49162153e3d5b400b712ab";
  }

  static const char* value(const ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8645f6a7a491621ULL;
  static const uint64_t static_value2 = 0x53e3d5b400b712abULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_service_examples/MP3InventoryServiceResponse";
  }

  static const char* value(const ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string response_string\n\
string[] list_strings\n\
";
  }

  static const char* value(const ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response_string);
      stream.next(m.list_strings);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MP3InventoryServiceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_service_examples::MP3InventoryServiceResponse_<ContainerAllocator>& v)
  {
    s << indent << "response_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.response_string);
    s << indent << "list_strings[]" << std::endl;
    for (size_t i = 0; i < v.list_strings.size(); ++i)
    {
      s << indent << "  list_strings[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.list_strings[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVICE_EXAMPLES_MESSAGE_MP3INVENTORYSERVICERESPONSE_H
